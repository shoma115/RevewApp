# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  proxy:
    image: nginx:1.20-alpine
    ports:
      - 8080:80
    volumes:
      # - ./src:/data
      - ./infra/nginx/default.conf:/etc/nginx/conf.d/default.conf
    # working_dir: /data

  node:
    build: 
      context: ./src/review-app-front
    volumes:
      - ./src/review-app-front:/data
    depends_on:
      - laravel
      # - morphological-analysis-python
      
  laravel:
    build: 
      context: ./src/review-app-backend
    volumes:
      - ./src/review-app-backend:/data
    depends_on:
      - db
  
  # morphological-analysis-python:
  #   build: 
  #     context:
  #   depends_on:
  #     - db

  db:
    build: ./infra/mysql
    volumes:
      - db-store:/var/lib/mysql

volumes:
  db-store:


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

